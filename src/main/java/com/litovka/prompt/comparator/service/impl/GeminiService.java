package com.litovka.prompt.comparator.service.impl;

import dev.langchain4j.model.chat.ChatLanguageModel;
import dev.langchain4j.model.googleai.GoogleAiGeminiChatModel;
import com.litovka.prompt.comparator.config.AIConfigurationProperties;
import com.litovka.prompt.comparator.dto.PromptDTO;
import com.litovka.prompt.comparator.exception.GeminiException;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

/**
 * Service implementation for handling AI-based interactions using Google's Gemini AI model.
 * This service uses the langchain4j GoogleAiGeminiChatModel to generate text-based responses
 * based on the provided prompts and configuration parameters.
 * The Gemini-specific configuration, such as API key, is obtained from AIConfigurationProperties.
 */
@Slf4j
@Service
public class GeminiService extends BaseAIService {

    private final AIConfigurationProperties aiConfigurationProperties;

    public GeminiService(AIConfigurationProperties aiConfigurationProperties) {
        this.aiConfigurationProperties = aiConfigurationProperties;
    }

    /**
     * Returns the type of the AI model being used.
     *
     * @return the model type as a string
     */
    @Override
    protected String getModelType() {
        return "Gemini";
    }

    /**
     * Calls the Google Gemini API to generate a response.
     *
     * @param promptDTO an instance of {@code PromptDTO} containing the prompt text and configuration settings
     * @param model the name of the Gemini model to be used for generating the response
     * @return the response generated by the Google Gemini AI model as a {@code String}
     */
    @Override
    protected String callModelApi(PromptDTO promptDTO, String model) {
        ChatLanguageModel chatModel = GoogleAiGeminiChatModel.builder()
                .apiKey(aiConfigurationProperties.getGemini().getApiKey())
                .modelName(model)
                .temperature(promptDTO.getTemperature())
                .maxOutputTokens(promptDTO.getMaxTokens())
                .topP(promptDTO.getTopP())
                .build();

        return chatModel.chat(promptDTO.getPrompt());
    }

    /**
     * Creates a GeminiException with the specified message and cause.
     *
     * @param message the error message
     * @param cause the cause of the exception
     * @return a GeminiException
     */
    @Override
    protected RuntimeException createException(String message, Exception cause) {
        return new GeminiException(message, cause);
    }
}
