package com.litovka.prompt.comparator.service.impl;

import dev.langchain4j.model.anthropic.AnthropicChatModel;
import dev.langchain4j.model.chat.ChatLanguageModel;
import com.litovka.prompt.comparator.config.AIConfigurationProperties;
import com.litovka.prompt.comparator.dto.PromptDTO;
import com.litovka.prompt.comparator.exception.ClaudeException;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

/**
 * Service implementation for interacting with the Anthropic Claude AI model.
 * This service facilitates generating text-based responses using the Claude model
 * by leveraging the AnthropicChatModel from langchain4j.
 * The configuration for the Claude model, such as API key and default parameters,
 * is fetched from AIConfigurationProperties.
 */
@Slf4j
@Service
public class ClaudeService extends BaseAIService {

    private final AIConfigurationProperties aiConfigurationProperties;

    public ClaudeService(AIConfigurationProperties aiConfigurationProperties) {
        this.aiConfigurationProperties = aiConfigurationProperties;
    }

    /**
     * Returns the type of the AI model being used.
     *
     * @return the model type as a string
     */
    @Override
    protected String getModelType() {
        return "Claude";
    }

    /**
     * Calls the Anthropic Claude API to generate a response.
     *
     * @param promptDTO an instance of {@code PromptDTO} containing the prompt text and associated settings
     * @param model the name of the model to be used for generating the response
     * @return the response generated by the Claude AI model as a {@code String}
     */
    @Override
    protected String callModelApi(PromptDTO promptDTO, String model) {
        ChatLanguageModel chatModel = AnthropicChatModel.builder()
                .apiKey(aiConfigurationProperties.getClaude().getApiKey())
                .modelName(model)
                .temperature(promptDTO.getTemperature())
                .maxTokens(promptDTO.getMaxTokens())
                .topP(promptDTO.getTopP())
                .build();

        return chatModel.chat(promptDTO.getPrompt());
    }

    /**
     * Creates a ClaudeException with the specified message and cause.
     *
     * @param message the error message
     * @param cause the cause of the exception
     * @return a ClaudeException
     */
    @Override
    protected RuntimeException createException(String message, Exception cause) {
        return new ClaudeException(message, cause);
    }
}
