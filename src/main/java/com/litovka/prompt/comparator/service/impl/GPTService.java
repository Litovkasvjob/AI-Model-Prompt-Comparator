package com.litovka.prompt.comparator.service.impl;

import com.theokanning.openai.completion.chat.ChatCompletionRequest;
import com.theokanning.openai.completion.chat.ChatMessage;
import com.theokanning.openai.service.OpenAiService;
import com.litovka.prompt.comparator.dto.PromptDTO;
import com.litovka.prompt.comparator.exception.GPTException;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;

/**
 * Service implementation for handling AI-based interactions using OpenAI's GPT models.
 * This service interacts with the OpenAiService to generate text-based responses
 * based on the given prompts and model configurations.
 */
@Slf4j
@Service
public class GPTService extends BaseAIService {

    private final OpenAiService openAiService;

    public GPTService(OpenAiService openAiService) {
        this.openAiService = openAiService;
    }

    /**
     * Returns the type of the AI model being used.
     *
     * @return the model type as a string
     */
    @Override
    protected String getModelType() {
        return "GPT";
    }

    /**
     * Calls the OpenAI API to generate a response.
     *
     * @param promptDTO an instance of {@code PromptDTO} containing the prompt text and associated settings
     * @param model the name of the model to be used for generating the response
     * @return the response generated by the OpenAI service as a {@code String}
     */
    @Override
    protected String callModelApi(PromptDTO promptDTO, String model) {
        List<ChatMessage> messages = new ArrayList<>();
        messages.add(new ChatMessage("user", promptDTO.getPrompt()));

        ChatCompletionRequest completionRequest = ChatCompletionRequest.builder()
                .messages(messages)
                .model(model)
                .temperature(promptDTO.getTemperature())
                .maxTokens(promptDTO.getMaxTokens())
                .topP(promptDTO.getTopP())
                .build();

        return openAiService.createChatCompletion(completionRequest)
                .getChoices().get(0).getMessage().getContent();
    }

    /**
     * Creates a GPTException with the specified message and cause.
     *
     * @param message the error message
     * @param cause the cause of the exception
     * @return a GPTException
     */
    @Override
    protected RuntimeException createException(String message, Exception cause) {
        return new GPTException(message, cause);
    }
}
